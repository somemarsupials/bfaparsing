# -*- coding: utf-8 -*-

from .token import Token


class TreeView:

    def __init__(self, root):
        """ Create a TokenView based on the given token. A TokenView
        provides an easy means of traversing a parse tree.
        
        DETAILS OF METHODS?
        """
        self.root = root

    def flatten_list(self, token):
        """ Convert a token generated by recursion to a flat list of
        tokens. Returns a list.
        """
        out = []
        for c in token.children:
            if c.token_type == token.token_type:
                out.append(self.flatten_list(c))
            else:
                out.append(c)
        return out

    def flatten(self, token):
        """ Convert tokens created by recursive rules into a flat token.
        For example, a token created by the rule "a := b a | b" might
        create a token with the structure "a -> b a -> b", where "->"
        denotes children of tokens. The flatten would convert this to a
        token with children "a -> b b".
        """
        # create a new token with same type
        new = Token(token_type=token.token_type)
        # replace children with flattened children
        new.children = self.flatten_list(token)
        return new

    def tokens(self, aggregate=[])
        for c in root.children:
            pass

